
@{
    ViewBag.Title = "LoggedIn";
}

@if (Session["UserId"] != null)
{
    <h1>Hello @Session["Username"].ToString()</h1>
    @Html.ActionLink("Logout", "Logout", null, null, new { @class = "cambio" })
    <div class="container">

        <div class="header">

            <div id="iss-image-outer" class="panel iss-image-outer">
                <div id="iss-image" class="iss-image"></div>
            </div>

            <div class="header-inner">
                <div id="iss-info" class="panel">
                    <div class="panel-header">
                        <div class="header-cell"><span class="header-icon">🛰</span>ISS</div>
                        <div class="header-cell locate tooltip" onclick="centreOnISS()">
                            <i class="fas fa-location-arrow"></i>
                            <span class="tooltiptext">Centre map on ISS</span>
                        </div>
                    </div>
                    <div class="row panel-row">
                        <div class="panel-cell panel-name">Longitude</div>
                        <div id="iss-long" class="panel-cell panel-value panel-value-sm"></div>
                        <div class="panel-cell panel-cell-sm panel-name">Altitude</div>
                        <div id="iss-alt" class="panel-cell panel-value"></div>
                    </div>
                    <div class="row panel-row">
                        <div class="panel-cell panel-name">Latitude</div>
                        <div id="iss-lat" class="panel-cell panel-value panel-value-sm"></div>
                        <div class="panel-cell panel-cell-sm panel-name">Velocity</div>
                        <div id="iss-vel" class="panel-cell panel-value"></div>
                    </div>
                </div>

            </div>

            <div id="clock" class="panel clock">
                <div id="time" class="time"></div>
                <div id="date" class="date"></div>
            </div>

        </div>

        <div id="map-container" class="map-container">
            <div class="fetching">
                <svg width="60" height="60" viewBox="0 0 24 24" fill="#60AFCB">
                    <path d="M19,8L15,12H18A6,6 0 0,1 12,18C11,18 10.03,17.75 9.2,17.3L7.74,18.76C8.97,19.54 10.43,20 12,20A8,8 0 0,0 20,12H23M6,12A6,6 0 0,1 12,6C13,6 13.97,6.25 14.8,6.7L16.26,5.24C15.03,4.46 13.57,4 12,4A8,8 0 0,0 4,12H1L5,16L9,12" />
                    <animateTransform attributeType="xml" attributeName="transform" type="rotate" from="360" to="0" dur="1.5s" repeatCount="indefinite" />
                </svg>
                <br>
                Fetching ISS location data...
            </div>
        </div>

        <div class="footer">
            <div>ISS location info by <a href="https://wheretheiss.at/w/developer" target="_blank">Where the ISS is at</a></div>
            <div><a href="https://en.wikipedia.org/wiki/International_Space_Station" target="_blank">Learn more about the ISS</a></div>
            <div><a href="https://spotthestation.nasa.gov/" target="_blank">Spot the ISS</a></div>
        </div>

    </div>

    <!-- ---------------------- -->

    <div class="small-screen">
        <div class="small-screen-content">
            <p>Sorry my friend, but you're going to need a bigger display.</p>
            <p class="read-more-link"><a href="https://www.samsung.com/uk/monitors/monitor-c49j89-lc49j890dkuxen/" target="_blank">More info...</a></p>
        </div>
    </div>

    @section scripts {
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mapbox-gl/1.8.0/mapbox-gl.js"></script>
        <script type="text/javascript">
            // =================
            // VARIABLES
            // =================

            mapboxgl.accessToken = 'pk.eyJ1Ijoic3R2bjIwIiwiYSI6ImNrYm40ZzZodDB2dXgyb282MHN6ZzcyMnIifQ.2Lmg4PKc-_Z4ysXrdYs47Q'
            // NOTE: If forking please get your own mapbox token from https://www.mapbox.com/

            // Strings for the date
            const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
            const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]

            // DOM elements
            const panelElements = [] // the fields in the info panel in the header bar
            panelElements[0] = document.querySelector('#iss-long')
            panelElements[1] = document.querySelector('#iss-lat')
            panelElements[2] = document.querySelector('#iss-alt')
            panelElements[3] = document.querySelector('#iss-vel')
            const time = document.querySelector('#time') // the time...
            const date = document.querySelector('#date') // ... and date in clock panel

            let map, ISS, ISS_marker // used by createMap() function and to move the marker

            // Marker legends
            const ISSloc = document.createElement('div') // the "ISS" marker text
            ISSloc.className = 'marker iss-loc';
            const ISSvis = document.createElement('div') // to show sun/moon icon depending of if ISS is in daylight/eclipsed
            ISSvis.id = 'iss-vis'
            ISSvis.className = 'iss-vis'
            ISSloc.appendChild(ISSvis)


            // =================
            // HELPER FUNCTIONS
            // =================

            /*
             * desc Add leading zero
             * param num (int)
             * return string
             */
            const format = (num) => {
                return num < 10 ? `0${num}` : num
            }

            /*
             * desc Converts decimal degrees to deg, mins, secs
             * param deg (float) - decimal degrees
             * param type (string) - either 'longitude' or 'latitude'
             * return string
             */
            const getDMS = (deg, type) => {

                let arr = ['S', 'N'] // type = 'latitude'
                if (type == 'longitude') {
                    arr = ['W', 'E']
                }

                const str = deg < 0 ? arr[0] : arr[1]
                const degAbs = Math.abs(deg)
                const degrees = Math.floor(degAbs)
                const mins = format(Math.floor((degAbs - degrees) * 60))
                const secs = format(Math.round((3600 * (degAbs - degrees) - 60 * mins) * 100) / 100)

                return `${degrees}&#176; ${mins}' ${secs}" ${str}`

            }


            // =================
            // FUNCTIONS
            // =================

            /*
             * desc Set up the map
             */
            const createMap = async () => {

                const ISS_data = await fetchISSdata()

                document.querySelector('#map-container').innerHTML = '';

                map = await new mapboxgl.Map({
                    container: 'map-container',
                    // style: 'mapbox://styles/mapbox/navigation-guidance-night-v2',
                    style: 'mapbox://styles/mapbox/satellite-v9',
                    center: [ISS_data.longitude, ISS_data.latitude],
                    zoom: 3.5,
                    minZoom: 1.75,
                    maxZoom: 9
                })

                map.addControl(new mapboxgl.NavigationControl({
                    showCompass: false
                }))

                ISS = new mapboxgl.Marker()
                    .setLngLat([ISS_data.longitude, ISS_data.latitude])
                    .addTo(map)

                ISS_marker = new mapboxgl.Marker(ISSloc)
                    .setLngLat([ISS_data.longitude, ISS_data.latitude])
                    .addTo(map)

            }

            /*
             * desc Get the current location of the ISS
             * return obj
             */
            const fetchISSdata = async () => {

                const ISS_data = await fetch('https://api.wheretheiss.at/v1/satellites/25544')
                return await ISS_data.json()

            }

            /*
             * desc Reposition the marker on the map
             * param ISS_data obj - the ISS data object
             */
            const repositionMarker = (ISS_data) => {

                ISS.setLngLat([ISS_data.longitude, ISS_data.latitude])
                ISS_marker.setLngLat([ISS_data.longitude, ISS_data.latitude])

            }

            /*
             * desc Update the info panels
             * param ISS_data obj - the ISS data object
             */
            const updatePanel = (ISS_data) => {

                // Longitude and latitude with conversion to DMS
                panelElements[0].innerHTML = `${ISS_data.longitude.toFixed(4)}&#176;<br><span class="dms">${getDMS(ISS_data.longitude, 'longitude')}</span>`
                panelElements[1].innerHTML = `${ISS_data.latitude.toFixed(4)}&#176;<br><span class="dms">${getDMS(ISS_data.latitude)}</span>`
                // Altitude and velocity with converstion from Km to miles
                let altitude = parseFloat(Math.round(ISS_data.altitude * 100) / 100).toFixed(2)
                panelElements[2].innerHTML = `${altitude} Km<br><span class="dms">${(Math.round(altitude / 1.609344 * 100) / 100).toFixed(2)} miles</span>`
                let velocity = parseFloat(Math.round(ISS_data.velocity * 100) / 100).toFixed(2)
                panelElements[3].innerHTML = `${velocity} Km/h<br><span class="dms">${(Math.round(velocity / 1.609344 * 100) / 100).toFixed(2)} mph</span>`

                // update icon on marker
                if (ISS_data.visibility === 'eclipsed') {
                    ISSvis.classList.add('iss-vis-eclipsed') // show moon icon when ISS eclipsed
                } else {
                    ISSvis.classList.remove('iss-vis-eclipsed') // show sun icon when ISS in daylight
                }

            }

            /*
             * desc Run the clock
             */
            const runClock = () => {

                var d = new Date()
                time.innerHTML = `${format(d.getHours())}:${format(d.getMinutes())}<span class="seconds">:${format(d.getSeconds())}</span>`
                date.innerHTML = `${days[d.getDay()]}, ${format(d.getDate())} ${months[d.getMonth()]} ${d.getFullYear()}`
                setTimeout(function () { runClock(); }, 1000)

            }

            /*
             * desc Button to centre on ISS was clicked
             */
            const centreOnISS = async () => {

                const ISS_data = await fetchISSdata()
                map.flyTo({
                    center: [ISS_data.longitude, ISS_data.latitude]
                })

            }


            /*
             * desc The loop to continuously update the ISS location data
             */
            const run = async () => {

                const ISS_data = await fetchISSdata()
                repositionMarker(ISS_data)
                updatePanel(ISS_data)
                setTimeout(() => {
                    run()
                }, 1000)

            }

            // =================
            // LET'S GO....
            // =================

            createMap()
            runClock()
            run()
        </script>
    }
}

